'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { getTelegramUser, showBackButton, hideBackButton, hapticFeedback } from '@/lib/telegram';
import { api, type Player, type Lobby, type Team } from '@/lib/api';

export default function LobbyPage() {
  const router = useRouter();
  const params = useParams();
  const lobbyCode = params.code as string;

  const [telegramUser, setTelegramUser] = useState<any>(null);
  const [lobby, setLobby] = useState<Lobby | null>(null);
  const [players, setPlayers] = useState<Player[]>([]);
  const [teams, setTeams] = useState<Team[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const currentPlayer = players.find(p => p.id === telegramUser?.id);
  const isOrganizer = lobby?.organizer_id === telegramUser?.id;
  const isLeader = currentPlayer?.status === 'leader';
  const userRole = isOrganizer ? '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä' : isLeader ? '–ö–∞–ø–∏—Ç–∞–Ω' : '–ò–≥—Ä–æ–∫';

  useEffect(() => {
    const user = getTelegramUser();
    setTelegramUser(user);

    // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (!user) {
      setTelegramUser({
        id: Math.floor(Math.random() * 1000000),
        first_name: 'Test User'
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    showBackButton(() => {
      router.push('/');
    });

    return () => {
      hideBackButton();
    };
  }, [router]);

  useEffect(() => {
    if (telegramUser && lobbyCode) {
      loadLobbyData();
    }
  }, [telegramUser, lobbyCode]);

  const loadLobbyData = async () => {
    try {
      setLoading(true);
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–±–±–∏
      const data = await api.getLobbyByCode(lobbyCode);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –≤ –ª–æ–±–±–∏
      const playerInLobby = data.players.find(p => p.id === telegramUser.id);
      
      if (!playerInLobby) {
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ –ª–æ–±–±–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è
        const joinData = await api.joinLobby(lobbyCode, String(telegramUser.id));
        setLobby(joinData.lobby);
        setPlayers(joinData.players);
        setTeams(joinData.teams);
      } else {
        // –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –ª–æ–±–±–∏
        setLobby(data.lobby);
        setPlayers(data.players);
        setTeams(data.teams);
      }
      
      setError('');
    } catch (err: any) {
      console.error('Error loading lobby:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–±–±–∏');
      hapticFeedback('error');
    } finally {
      setLoading(false);
    }
  };

  const copyLobbyCode = () => {
    if (navigator.clipboard) {
      navigator.clipboard.writeText(lobbyCode);
      hapticFeedback('success');
      // TODO: –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
  const getTeamPlayers = (teamId: number) => {
    return players.filter(p => p.player_team_id === teamId);
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
  const playersWithoutTeam = players.filter(p => p.status === 'out_of_team');

  if (loading) {
    return (
      <main className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 flex items-center justify-center">
        <div className="text-center">
          <svg className="animate-spin h-12 w-12 text-purple-400 mx-auto" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
          </svg>
          <p className="text-gray-400 mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–±–±–∏...</p>
        </div>
      </main>
    );
  }

  if (error && !lobby) {
    return (
      <main className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 flex items-center justify-center p-4">
        <div className="max-w-md w-full bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 border border-gray-700/50">
          <div className="text-center space-y-4">
            <div className="text-red-400 text-5xl">‚ö†Ô∏è</div>
            <h2 className="text-white text-xl font-bold">–û—à–∏–±–∫–∞</h2>
            <p className="text-gray-400">{error}</p>
            <button
              onClick={() => router.push('/')}
              className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-xl transition-all"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </main>
    );
  }

  return (
    <main className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-4 pb-20">
      <div className="max-w-4xl mx-auto space-y-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–±–±–∏ */}
        <div className="bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 border border-gray-700/50 shadow-2xl">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-2xl font-bold text-white">–õ–æ–±–±–∏</h1>
              <p className="text-gray-400 text-sm mt-1">–†–æ–ª—å: {userRole}</p>
            </div>
            <div className="text-right">
              <button
                onClick={copyLobbyCode}
                className="bg-purple-600/30 hover:bg-purple-600/50 border border-purple-400/30 text-purple-200 font-mono text-xl font-bold py-2 px-4 rounded-xl transition-all"
              >
                {lobbyCode}
              </button>
              <p className="text-gray-500 text-xs mt-1">–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</p>
            </div>
          </div>
        </div>

        {/* –ö–æ–º–∞–Ω–¥—ã */}
        {teams.length > 0 && (
          <div className="space-y-3">
            <h2 className="text-white text-lg font-bold px-2">–ö–æ–º–∞–Ω–¥—ã</h2>
            {teams.map(team => {
              const teamPlayers = getTeamPlayers(team.id);
              const leader = teamPlayers.find(p => p.id === team.team_leader_id);
              
              return (
                <div key={team.id} className="bg-gray-800/50 backdrop-blur-xl rounded-2xl p-4 border border-gray-700/50">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="text-white font-bold text-lg">{team.team_name}</h3>
                    <span className="text-purple-400 text-sm">
                      {teamPlayers.length} –∏–≥—Ä–æ–∫–æ–≤
                    </span>
                  </div>
                  
                  {/* –ö–∞–ø–∏—Ç–∞–Ω */}
                  {leader && (
                    <div className="mb-2">
                      <div className="bg-purple-600/20 border border-purple-400/30 rounded-lg p-2 flex items-center gap-2">
                        <span className="text-xl">üëë</span>
                        <span className="text-purple-200 font-semibold">{leader.player_name}</span>
                      </div>
                    </div>
                  )}
                  
                  {/* –ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã */}
                  <div className="space-y-1">
                    {teamPlayers.filter(p => p.status === 'player').map(player => (
                      <div key={player.id} className="bg-gray-700/30 rounded-lg p-2 flex items-center gap-2">
                        <span className="text-gray-400">‚Ä¢</span>
                        <span className="text-gray-300">{player.player_name}</span>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>
        )}

        {/* –ò–≥—Ä–æ–∫–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã */}
        {playersWithoutTeam.length > 0 && (
          <div className="space-y-3">
            <h2 className="text-white text-lg font-bold px-2">
              –ò–≥—Ä–æ–∫–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã ({playersWithoutTeam.length})
            </h2>
            <div className="bg-gray-800/50 backdrop-blur-xl rounded-2xl p-4 border border-gray-700/50 space-y-2">
              {playersWithoutTeam.map(player => (
                <div key={player.id} className="bg-gray-700/30 rounded-lg p-3 flex items-center justify-between">
                  <span className="text-gray-300">{player.player_name}</span>
                  {isOrganizer && (
                    <button className="text-red-400 hover:text-red-300 text-sm">
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –î–µ–π—Å—Ç–≤–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ */}
        {isOrganizer && (
          <div className="bg-gray-800/50 backdrop-blur-xl rounded-2xl p-4 border border-gray-700/50 space-y-3">
            <h2 className="text-white text-lg font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
            <button className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-xl transition-all">
              –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
            </button>
            <button className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-xl transition-all">
              –ù–∞—á–∞—Ç—å –¥—Ä–∞—Ñ—Ç
            </button>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å */}
        <button
          onClick={loadLobbyData}
          className="w-full bg-gray-700/50 hover:bg-gray-700 text-gray-300 font-bold py-3 px-6 rounded-xl transition-all"
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>
    </main>
  );
}

